# 2_monitoring.py
import streamlit as st
import pandas as pd
import plotly.express as px

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–æ–Ω", layout="wide")
st.title("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–≤–∏–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∑–æ–Ω–∞–º")

df = pd.read_csv("processed_transitions_dataset.csv", parse_dates=["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "next_date"])

# --- –ë–ª–æ–∫ 1. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –ß ---
st.header("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –ß")

min_days = st.slider("üìâ –ü–æ—Ä–æ–≥ –¥–Ω–µ–π –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ß", min_value=0, max_value=180, value=10, step=1)

black_inns = df[df["next_zone"] == "–ß"]["–ò–ù–ù"].unique()
durations = []

for inn in black_inns:
    group = df[df["–ò–ù–ù"] == inn].sort_values("–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    for i in range(len(group) - 1):
        current = group.iloc[i]
        next_ = group.iloc[i + 1]
        if next_["–ó–æ–Ω–∞"] == "–ß":
            days = (next_["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"] - current["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]).days
            if days >= min_days:
                durations.append({
                    "–ò–ù–ù": inn,
                    "–ó–æ–Ω–∞ –ø–µ—Ä–µ–¥ –ß": current["–ó–æ–Ω–∞"],
                    "–î–∞—Ç–∞ –≤—Ö–æ–¥–∞": current["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"],
                    "–î–∞—Ç–∞ –≤ –ß": next_["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"],
                    "–î–Ω–µ–π –≤ –∑–æ–Ω–µ": days
                })
            break

duration_df = pd.DataFrame(durations)

if not duration_df.empty:
    fig = px.box(
        duration_df,
        x="–ó–æ–Ω–∞ –ø–µ—Ä–µ–¥ –ß", y="–î–Ω–µ–π –≤ –∑–æ–Ω–µ",
        points="all",
        title=f"‚è±Ô∏è –í—Ä–µ–º—è –≤ –∑–æ–Ω–∞—Ö –ø–µ—Ä–µ–¥ –ß (>{min_days} –¥–Ω)",
        labels={"–ó–æ–Ω–∞ –ø–µ—Ä–µ–¥ –ß": "–ó–æ–Ω–∞", "–î–Ω–µ–π –≤ –∑–æ–Ω–µ": "–î–Ω–µ–π –¥–æ –ß"}
    )
    st.plotly_chart(fig, use_container_width=True)

    stats = duration_df.groupby("–ó–æ–Ω–∞ –ø–µ—Ä–µ–¥ –ß")["–î–Ω–µ–π –≤ –∑–æ–Ω–µ"].agg(["mean", "median", "count"]).round(1)
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–æ–Ω–∞–º –ø–µ—Ä–µ–¥ –ß")
    st.dataframe(stats)

    st.markdown("### üîç –ü—Ä–∏–º–µ—Ä—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
    st.dataframe(duration_df.sort_values("–î–Ω–µ–π –≤ –∑–æ–Ω–µ", ascending=False))

    st.download_button(
        label="üìÖ –°–∫–∞—á–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ß",
        data=duration_df.to_csv(index=False).encode("utf-8"),
        file_name="durations_to_black.csv",
        mime="text/csv"
    )
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä–æ–≥—É")

# --- –ë–ª–æ–∫ 2. –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ ---
st.header("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–µ –¥–æ—à–ª–∏ –¥–æ –ß)")

# –ù–∞–π–¥—ë–º —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –¥–æ—à—ë–ª –¥–æ –ß
last_steps = df.sort_values("–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è").groupby("–ò–ù–ù").last().reset_index()
not_black = last_steps[last_steps["–ó–æ–Ω–∞"] != "–ß"]

if not not_black.empty:
    st.markdown("### üìç –ó–æ–Ω—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –∫–ª–∏–µ–Ω—Ç—ã")
    zone_counts = not_black["–ó–æ–Ω–∞"].value_counts().reset_index()
    zone_counts.columns = ["–ó–æ–Ω–∞", "–ö–æ–ª-–≤–æ"]
    fig2 = px.bar(zone_counts, x="–ó–æ–Ω–∞", y="–ö–æ–ª-–≤–æ", title="üß≠ –ö–ª–∏–µ–Ω—Ç—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–æ–Ω–µ")
    st.plotly_chart(fig2, use_container_width=True)

    st.markdown("### üîç –ü—Ä–∏–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    st.dataframe(not_black[["–ò–ù–ù", "–ó–æ–Ω–∞", "–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]].sort_values("–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", ascending=False))
else:
    st.info("–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–æ—à–ª–∏ –¥–æ –ß. –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–µ—Ç.")

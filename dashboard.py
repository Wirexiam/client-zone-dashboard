# dashboard.py
import streamlit as st
import pandas as pd
import plotly.express as px
from itertools import product

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("processed_transitions_dataset.csv", parse_dates=["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "next_date"])

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–æ–Ω", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")

# --- –°–∞–π–¥–±–∞—Ä —Ñ–∏–ª—å—Ç—Ä—ã ---
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
zones = df["–ó–æ–Ω–∞"].unique().tolist()
selected_zones = st.sidebar.multiselect("–¢–µ–∫—É—â–∞—è –∑–æ–Ω–∞", zones, default=zones)

start_date = df["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"].min().date()
end_date = df["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"].max().date()
date_range = st.sidebar.date_input("–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", [start_date, end_date])

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ---
scenarios = set()
for a, b in product(zones, repeat=2):
    if a != b:
        scenarios.add((a, b))
for a, b, c in product(zones, repeat=3):
    if len(set([a, b, c])) == 3:
        scenarios.add((a, b, c))

scenario_strings = sorted([' ‚Üí '.join(s) for s in scenarios])
scenario_options = ["‚Äî –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ ‚Äî"] + scenario_strings
selected_scenario = st.sidebar.selectbox("üéØ –í—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∞ (–ø–æ –∑–æ–Ω–∞–º)", scenario_options)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–∫–ª—é—á—ë–Ω –ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
apply_scenario = selected_scenario != "‚Äî –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ ‚Äî"
selected_steps = selected_scenario.split(" ‚Üí ") if apply_scenario else []

# --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –∏ –∑–æ–Ω–∞–º ---
filtered_df = df[
    (df["–ó–æ–Ω–∞"].isin(selected_zones)) &
    (df["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"] >= pd.to_datetime(date_range[0])) &
    (df["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"] <= pd.to_datetime(date_range[1]))
]

# --- –ü–æ–∏—Å–∫ –ò–ù–ù –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é ---
if apply_scenario:
    matching_inns = []
    for inn, group in df.groupby("–ò–ù–ù"):
        path = group.sort_values("–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")["–ó–æ–Ω–∞"].tolist()
        for i in range(len(path) - len(selected_steps) + 1):
            if path[i:i + len(selected_steps)] == selected_steps:
                matching_inns.append(inn)
                break
    scenario_df = df[df["–ò–ù–ù"].isin(matching_inns)]
else:
    scenario_df = filtered_df.copy()

# --- KPI ---
col1, col2, col3 = st.columns(3)
col1.metric("üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", scenario_df["–ò–ù–ù"].nunique())
col2.metric("üîÅ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤", len(scenario_df))
col3.metric("üìÖ –ü–µ—Ä–∏–æ–¥", f"{date_range[0]} ‚Äî {date_range[1]}")

st.markdown("---")

# --- –ì—Ä–∞—Ñ–∏–∫: –ß–∞—Å—Ç–æ—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ---
transition_counts = (
    scenario_df
    .groupby(["–ó–æ–Ω–∞", "next_zone"])
    .size()
    .reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
)
fig1 = px.sunburst(
    transition_counts,
    path=["–ó–æ–Ω–∞", "next_zone"],
    values="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
    title="üîÑ –ß–∞—Å—Ç–æ—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏–∑ –∑–æ–Ω—ã –≤ –∑–æ–Ω—É"
)
st.plotly_chart(fig1, use_container_width=True)

# --- –ì—Ä–∞—Ñ–∏–∫: –î–∏–Ω–∞–º–∏–∫–∞ --- –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è
graph_df = scenario_df.copy()

# –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–±—Ä–∞–Ω ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —à–∞–≥–∞–º
if apply_scenario:
    steps_for_graph = selected_steps
else:
    steps_for_graph = zones  # –í—Å–µ –∑–æ–Ω—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ"

# –°–æ–±–∏—Ä–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à–∞–≥–∞–º
parts = []
for step in steps_for_graph:
    from_part = graph_df[graph_df["–ó–æ–Ω–∞"] == step][["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]].copy()
    from_part["zone"] = step
    from_part["date"] = from_part["–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]

    to_part = graph_df[graph_df["next_zone"] == step][["next_date"]].copy()
    to_part["zone"] = step
    to_part["date"] = to_part["next_date"]

    parts.append(pd.concat([from_part[["zone", "date"]], to_part[["zone", "date"]]]))

if parts:
    df_combined = pd.concat(parts)
    df_combined["month"] = df_combined["date"].dt.to_period("M").astype(str)

    monthly_trend = df_combined.groupby(["month", "zone"]).size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    title = f"üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º ({selected_scenario})" if apply_scenario else "üìà –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ –∑–æ–Ω–∞–º"
    fig2 = px.line(
        monthly_trend,
        x="month", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", color="zone",
        markers=True,
        title=title
    )
    st.plotly_chart(fig2, use_container_width=True)
else:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# --- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ ---
scenario_label = selected_scenario
selected_steps = selected_scenario.split(" ‚Üí ")

st.markdown(f"### üîé –ü—Ä–∏–º–µ—Ä—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º {scenario_label}")

show_only_transitions = st.sidebar.checkbox("üîé –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ (–±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏)", value=False)

if apply_scenario:
    # –®–∞–≥ 1. –ù–∞–π–¥—ë–º –ò–ù–ù, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —à–∞–≥–æ–≤
    matching_inns = []
    for inn, group in df.groupby("–ò–ù–ù"):
        path = group.sort_values("–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")["–ó–æ–Ω–∞"].tolist()
        for i in range(len(path) - len(selected_steps) + 1):
            if path[i:i + len(selected_steps)] == selected_steps:
                matching_inns.append(inn)
                break
    example_df = filtered_df[filtered_df["–ò–ù–ù"].isin(matching_inns)]

    if show_only_transitions:
        filters = []
        for i in range(len(selected_steps) - 1):
            a = selected_steps[i]
            b = selected_steps[i + 1]
            pair_filter = (example_df["–ó–æ–Ω–∞"] == a) & (example_df["next_zone"] == b)
            filters.append(pair_filter)
        final_filter = filters[0]
        for f in filters[1:]:
            final_filter |= f
        example_df = example_df[final_filter]

else:
    example_df = filtered_df.copy()  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë

st.dataframe(
    example_df[["–ò–ù–ù", "–ó–æ–Ω–∞", "–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "next_zone", "next_date"]]
    .sort_values(by=["–ò–ù–ù", "–î–∞—Ç–∞_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"])
    .reset_index(drop=True)
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ CSV ---
st.download_button(
    label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é",
    data=scenario_df.to_csv(index=False).encode("utf-8"),
    file_name="scenario_filtered_data.csv",
    mime="text/csv"
)
